{"ast":null,"code":"/**\n * @remix-run/router v1.0.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _globalHistory$state, _globalHistory$state2;\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state = globalHistory.state) == null ? void 0 : _globalHistory$state.usr) || null, ((_globalHistory$state2 = globalHistory.state) == null ? void 0 : _globalHistory$state2.key) || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _globalHistory$state3, _globalHistory$state4;\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state3 = globalHistory.state) == null ? void 0 : _globalHistory$state3.usr) || null, ((_globalHistory$state4 = globalHistory.state) == null ? void 0 : _globalHistory$state4.key) || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to == null ? void 0 : to.key) || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {})); // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n    let dataRoute = _extends({}, route, {\n      id,\n      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n    });\n    return dataRoute;\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n  return matches;\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    :\n    // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n/**\n * @private\n */\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : _extends({}, toArg);\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    var _this$subscriber2;\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeys.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    if (error) {\n      var _this$subscriber;\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      (_this$subscriber = this.subscriber) == null ? void 0 : _this$subscriber.call(this, false);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    (_this$subscriber2 = this.subscriber) == null ? void 0 : _this$subscriber2.call(this, false);\n    return data;\n  }\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n  cancel() {\n    var _this$subscriber3;\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    (_this$subscriber3 = this.subscriber) == null ? void 0 : _this$subscriber3.call(this, true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  var _init$hydrationData, _init$hydrationData2, _init$hydrationData3;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: ((_init$hydrationData = init.hydrationData) == null ? void 0 : _init$hydrationData.loaderData) || {},\n    actionData: ((_init$hydrationData2 = init.hydrationData) == null ? void 0 : _init$hydrationData2.actionData) || null,\n    errors: ((_init$hydrationData3 = init.hydrationData) == null ? void 0 : _init$hydrationData3.errors) || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n    return router;\n  } // Clean up a router and it's side effects\n\n  function dispose() {\n    var _pendingNavigationCon;\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    (_pendingNavigationCon = pendingNavigationController) == null ? void 0 : _pendingNavigationCon.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n  function completeNavigation(location, newState) {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\"; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts == null ? void 0 : opts.state);\n    let historyAction = (opts == null ? void 0 : opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts == null ? void 0 : opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n  async function startNavigation(historyAction, location, opts) {\n    var _pendingNavigationCon2;\n\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    (_pendingNavigationCon2 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon2.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts == null ? void 0 : opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts == null ? void 0 : opts.preventScrollReset) === true;\n    let loadingNavigation = opts == null ? void 0 : opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts == null ? void 0 : opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts != null && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts != null && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n      loadingNavigation = navigation;\n    } // Call loaders\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts == null ? void 0 : opts.submission, opts == null ? void 0 : opts.replace, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n      await startRedirectNavigation(result, redirectNavigation, opts == null ? void 0 : opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts == null ? void 0 : opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches != null && matches.some(m => m.route.id === routeId)) || (matchesToLoad == null ? void 0 : matchesToLoad.some(m => m.route.id === routeId))); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        var _state$fetchers$get;\n        let [key] = _ref2;\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: (_state$fetchers$get = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts);\n    let match = getTargetMatch(matches, path);\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    var _state$fetchers$get2;\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: ((_state$fetchers$get2 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get2.data) || undefined\n    });\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined,\n    // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      var _state$fetchers$get3;\n      let [staleKey] = _ref6;\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: (_state$fetchers$get3 = state.fetchers.get(staleKey)) == null ? void 0 : _state$fetchers$get3.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      var _pendingNavigationCon3;\n      invariant(pendingAction, \"Expected pending action\");\n      (_pendingNavigationCon3 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon3.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    var _state$fetchers$get4;\n\n    // Put this fetcher into it's loading state\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: ((_state$fetchers$get4 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get4.data) || undefined\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n    return _extends({\n      location\n    }, result);\n  }\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    } // Pick off the right state value to return\n\n    let routeData = [result.errors, result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n    return value;\n  }\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n    return {\n      location,\n      matches\n    };\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts) {\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: (opts == null ? void 0 : opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n  return {\n    path: createPath(parsedPath)\n  };\n}\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) ||\n  // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches == null ? void 0 : fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var _currentMatch$route$p;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    ((_currentMatch$route$p = currentMatch.route.path) == null ? void 0 : _currentMatch$route$p.endsWith(\"*\")) && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) ||\n  // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() ||\n  // Search params affect all loaders\n  currentUrl.search !== nextUrl.search ||\n  // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return defaultShouldRevalidate;\n}\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n  if (result instanceof Response) {\n    var _result$headers$get;\n\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n    let data;\n    if ((_result$headers$get = result.headers.get(\"Content-Type\")) != null && _result$headers$get.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n  return searchParams;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds == null ? void 0 : activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var _errors;\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!((_errors = errors) != null && _errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  matches.forEach(match => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result == null ? void 0 : result.type) === ResultType.redirect;\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData == null ? void 0 : currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","_globalHistory$state","_globalHistory$state2","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","_globalHistory$state3","_globalHistory$state4","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","warning","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_extends","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","route","treePath","id","join","invariant","has","add","dataRoute","children","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","_this$subscriber2","aborted","delete","done","_this$subscriber","call","subscribe","cancel","_this$subscriber3","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","_init$hydrationData","_init$hydrationData2","_init$hydrationData3","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","_pendingNavigationCon","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_pendingNavigationCon2","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","_state$fetchers$get","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","_state$fetchers$get2","fetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_state$fetchers$get3","_ref7","doneFetcher","_pendingNavigationCon3","_state$fetchers$get4","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","queryImpl","queryRoute","routeData","find","values","method","shortCircuitState","matchRequest","submit","loadRouteData","actionHeaders","isRouteRequest","URL","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","searchParams","convertFormDataToSearchParams","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","includes","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","_currentMatch$route$p","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","resultType","onReject","handler","_result$headers$get","text","deferred","toUpperCase","body","Request","URLSearchParams","append","foundError","_errors","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","isFetcher","isRevalidatingLoader","unwrap","hasNakedIndexQuery","getAll","handle","origin"],"sources":["/Users/siddhi.agrawal/Desktop/pysllium-website/node_modules/@remix-run/router/history.ts","/Users/siddhi.agrawal/Desktop/pysllium-website/node_modules/@remix-run/router/utils.ts","/Users/siddhi.agrawal/Desktop/pysllium-website/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface AgnosticRouteObject {\n  caseSensitive?: boolean;\n  children?: AgnosticRouteObject[];\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface AgnosticDataRouteObject extends AgnosticRouteObject {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n}\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: AgnosticDataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.subscriber?.(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.subscriber?.(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    this.subscriber?.(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  invariant,\n  isRouteErrorResponse,\n  matchRoutes,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouterMatch] for a revalidating fetcher.load()\n */\ntype RevalidatingFetcher = [string, string, AgnosticDataRouteMatch];\n\n/**\n * Tuple of [href, DataRouteMatch] for an active fetcher.load()\n */\ntype FetchLoadMatch = [string, AgnosticDataRouteMatch];\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController?.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController?.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = opts?.preventScrollReset === true;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts?.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts?.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts?.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts?.submission,\n      opts?.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectNavigation, opts?.replace);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if (opts?.replace !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !matches?.some((m) => m.route.id === routeId) ||\n        matchesToLoad?.some((m) => m.route.id === routeId)\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(staleKey)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch\n  ) {\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(\"loader\", request, m)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(\"loader\", createRequest(href, request.signal), match)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let { location, result } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  async function queryRoute(request: Request, routeId: string): Promise<any> {\n    let { result } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.errors, result.actionData, result.loaderData].find(\n      (v) => v\n    );\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText,\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(\n    request: Request,\n    routeId?: string\n  ): Promise<{\n    location: Location;\n    result: Omit<StaticHandlerContext, \"location\"> | Response;\n  }> {\n    invariant(\n      request.method !== \"HEAD\",\n      \"query()/queryRoute() do not support HEAD requests\"\n    );\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    let { location, matches, shortCircuitState } = matchRequest(\n      request,\n      routeId\n    );\n\n    try {\n      if (shortCircuitState) {\n        return { location, result: shortCircuitState };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(\n          request,\n          matches,\n          getTargetMatch(matches, location),\n          routeId != null\n        );\n        return { location, result };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: {\n          ...result,\n          actionData: null,\n          actionHeaders: {},\n        },\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return { location, result: e };\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(pendingActionError || {})[0]\n    ).filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(\"loader\", request, m, true, isRouteRequest)\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function matchRequest(\n    req: Request,\n    routeId?: string\n  ): {\n    location: Location;\n    matches: AgnosticDataRouteMatch[];\n    routeMatch?: AgnosticDataRouteMatch;\n    shortCircuitState?: Omit<StaticHandlerContext, \"location\">;\n  } {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter((m) => m.route.id === routeId);\n    }\n\n    // Short circuit with a 404 if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error,\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {},\n        },\n      };\n    }\n\n    return { location, matches };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches?.forEach(([href, match], key) => {\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  skipRedirects: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds?.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(\n      405,\n      \"Method Not Allowed\",\n      `No action found for [${href}]`\n    ),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      currentLoaderData?.[match.route.id] !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    !hasNakedIndexQuery(search || \"\")\n  ) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}